# -*- coding: utf-8 -*-
"""Model Date Time Series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLxhBhxX0Zw8GxfIju0n5kBRxIKWPwt-
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

df = pd.read_csv('APPL_DATA.csv')
df.head()

df.info()

df.isnull().sum()

dates = df['Date'].values
volume = df['Volume'].values
 
plt.figure(figsize=(15,5))
plt.plot(dates, volume)
plt.title('Unit Terjual', fontsize=20)

df['Date'] = pd.to_datetime(df['Date'])
df = df.set_index('Date')

volume = volume.reshape(-1, 1)
volume

scaler = MinMaxScaler()
volume = scaler.fit_transform(volume)

x_train, x_val, y_train, y_val = train_test_split(volume, dates, test_size=0.2, shuffle=False)

# size x_train dan x_val
print(len(x_train), len(x_val))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set  = windowed_dataset(x_val, window_size=60, batch_size=32, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True, input_shape = [None, 1]),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

nilai_x = (volume.max() - volume.min()) * (10 / 100)

class callbacks(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < nilai_x):
      print('MAE < 10% skala data')
      self.model.stop_training = True

callbacks = callbacks()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(
    loss=tf.keras.losses.Huber(), 
    optimizer = optimizer,
    metrics=['mae']
)

history = model.fit(
    train_set,
    epochs=100,
    validation_data=val_set,
    verbose=2,
    callbacks=[callbacks],
)